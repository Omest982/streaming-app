version: "3.9"

services:
  streaming-app-db:
    container_name: streaming-app-db
    image: postgres:16.1
    restart: unless-stopped
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}

  dispatcher:
    container_name: dispatcher
    depends_on:
      - streaming-app-db
      - eureka-service
    restart: on-failure
    image: dispatcher
    build: /dispatcher/.
    ports:
      - ${DISPATCHER_PORT}:${DISPATCHER_PORT}
    environment:
      - DISPATCHER_PORT=${DISPATCHER_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=streaming-app-db
      - DB_PORT=${DB_PORT}
      - EUREKA_HOST=eureka-service
      - EUREKA_PORT=${EUREKA_PORT}

  eureka-service:
    container_name: eureka-service
    restart: on-failure
    image: eureka-service
    build: /eureka-service/.
    ports:
      - ${EUREKA_PORT}:${EUREKA_PORT}
    environment:
      - EUREKA_HOST=${EUREKA_HOST}
      - EUREKA_PORT=${EUREKA_PORT}

  api-gateway:
    container_name: api-gateway
    depends_on:
      - eureka-service
    restart: on-failure
    image: api-gateway
    build: /api-gateway/.
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    environment:
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - EUREKA_HOST=eureka-service
      - EUREKA_PORT=${EUREKA_PORT}

  security-service:
    container_name: security-service
    depends_on:
      - streaming-app-db
      - eureka-service
    restart: on-failure
    image: security-service
    build: /security-service/.
    ports:
      - ${SECURITY_SERVICE_PORT}:${SECURITY_SERVICE_PORT}
    environment:
      - SECURITY_SERVICE_PORT=${SECURITY_SERVICE_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=streaming-app-db
      - DB_PORT=${DB_PORT}
      - EUREKA_HOST=eureka-service
      - EUREKA_PORT=${EUREKA_PORT}
